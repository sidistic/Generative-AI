# -*- coding: utf-8 -*-
"""GPT-Intro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GT690wjkRjFC0UlOoI8ZgMPi_sXMX9u8
"""

!wget https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt

with open('input.txt','r', encoding='utf-8') as f:
  text = f.read()

print("length of dataset in characters: ", len(text))

print(text[:1000])

# Here are all the unique characters in the text
chars = sorted(list(set(text)))
vocab_size = len(chars)
print(''.join(chars))
print(vocab_size)

"""We need to tokenize the characters before we can train the model"""

# create mapping from char to int and vice versa
stoi = { ch:i for i,ch in enumerate(chars)}
itos = { i:ch for i,ch in enumerate(chars)}

# encode and decode using the mapping above
encode = lambda s: [stoi[c] for c in s] # takes a string and output is list of int
decode = lambda l: ''.join(itos[i] for i in l) # takes list of int, outputs string

#Testing the encoder/decoder
print(encode("hello world"))
print(decode(encode("hello world")))

"""This is a character level encoder!"""

# Now we encode the entire text dataset and store it into a torch.tensor

import torch

data = torch.tensor(encode(text), dtype = torch.long)
print(data.shape, data.dtype)
print(data[:1000]) # The first 1000 characters are now wrapped in a tensor and encoded

# creating test train split
n = int(0.9*len(data))
train_data = data[:n]
val_data = data[n:]

block_size = 8
train_data[:block_size+1]

"""in a block of 9 characters there are 8 examples. i.e the examples are

1.   18
2.   18 , 47
3.   18, 47, 56,


"""

x = train_data[:block_size]
y = train_data[1:block_size+1]

for t in range(block_size):
  context = x[:t+1]
  target = y[t]
  print(f"when the input is {context} the target is: {target}")

torch.manual_seed(1337)
batch_size = 4 #number of independent sequences to process in parallel.
block_size = 8 # maximum context length for predictions

def get_batch(split):
  #generate a small batch of data for inputs x and targets y
  data = train_data if split == 'train' else val_data
  ix = torch.randint(len(data) - block_size, (batch_size,))

  x = torch.stack([data[i:block_size+i] for i in ix])
  y = torch.stack([data[i+1:i+block_size+1] for i in ix])
  return x,y

xb,yb = get_batch('train')
print('inputs:')
print(xb.shape)
print(xb)
print('targets:')
print(yb.shape)
print(yb)

print("----")

for b in range(batch_size):
  for t in range(block_size):
    context = xb[b, :t+1]
    target = yb[b,t]
    print(f"when the input is {context.tolist()} the target: {target}")

print(xb)

"""Now we need a language model."""

import torch
import torch.nn as nn
from torch.nn import functional as F
torch.manual_seed(1337)

class BigramLanguageModel(nn.Module):

  def __init__(self, vocab_size):
    super().__init__()
    # each token directly reads off the logits for the next token from a lookup table
    self.token_embedding_table = nn.Embedding(vocab_size, vocab_size)

  def forward(self, idx,  targets = None):

    #idx and targets are both (B, T) tensor of integers
    logits = self.token_embedding_table(idx) # (B, T, C)

    if targets is None:
      loss = None
    else:
      B, T, C = logits.shape
      logits = logits.view(B*T,C)
      targets = targets.view(B*T)
      loss = F.cross_entropy(logits, targets)

    return logits, loss

  def generate(self, idx, max_new_tokens):
    # idx is (B, T) array of indices in the current context
    for _ in range(max_new_tokens):
      # get the predictions
      logits, loss = self(idx)
      # focus only on the last time step
      logits = logits[:, -1, :] # becomes (B, C)
      # apply softmax to get probabilities
      probs = F.softmax(logits, dim=-1) # (B, C)
      # Sample from distribution
      idx_next = torch.multinomial(probs,num_samples=1) # (B, 1)
      # Append sampled index to the running sequence
      idx = torch.cat((idx, idx_next), dim=1) # (B, T+1)
    return idx


m = BigramLanguageModel(vocab_size)
logits, loss = m(xb, yb)
print(logits.shape)
print(loss)

print(decode(m.generate(idx = torch.zeros((1, 1),dtype = torch.long), max_new_tokens=100)[0].tolist()))

"""We get some generated text but it is random."""

# create a PyTorch optimizer
optimizer = torch.optim.AdamW(m.parameters(), lr=1e-03)

batch_size = 32
for steps in range(1000):

  #sample a batch of data
  xb, yb = get_batch('train')

  #evaluate the loss
  logits, loss = m(xb,yb)
  optimizer.zero_grad(set_to_none=True)
  loss.backward()
  optimizer.step()

print(loss.item())

print(decode(m.generate(idx = torch.zeros((1, 1),dtype = torch.long), max_new_tokens=1000)[0].tolist()))

"""There is some improvement. Now we need to make sure the model looks at the tokens it has to make better predictions. We add attention here."""